{"remainingRequest":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/src/views/Tema2.vue?vue&type=template&id=2deaa4dc&lang=pug","dependencies":[{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/src/views/Tema2.vue","mtime":1741025468855},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/73311548_CF01_CULTIVO_DE_PLATANO/73311548_CF01_CULTIVO_DE_PLATANO/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}